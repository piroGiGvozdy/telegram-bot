import telebot
from telebot import types
import json
import os


bot = telebot.TeleBot(os.getenv("TOKEN"))

ADMIN_ID = os.getenv("ADMIN_ID")

@bot.message_handler(commands=['start'])
def start(message):
    global USER_NAME
    USER_NAME = message.from_user.first_name
    global USER_ID
    USER_ID = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', web_app=types.WebAppInfo(url='https://nyam-kohl.vercel.app/')))
    bot.send_message(USER_ID, f'–ü—Ä–∏–≤–µ—Ç, {USER_NAME}!\n–ñ–¥—É —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞)', reply_markup=markup)

@bot.message_handler(content_types=['web_app_data'])
def web_app_data_handler(message):
    try:
        data = json.loads(message.web_app_data.data)
        global order
        order = data.get("order", [])
        total_price = data.get("total_price", 0)

        global order_details
        order_details = "\n".join([
            f"{item['name']} - {item['quantity']} —à—Ç. ‚Äî {item['total_price']} ‚ÇΩ"
            for item in order
        ])
        admin_response = (
            f"–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑ –æ—Ç {USER_NAME}:\n\n"
            f"{order_details}\n\n"
            f"–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ"
        )
        response = (    
            f"–í–∞—à –∑–∞–∫–∞–∑:\n\n"
            f"{order_details}\n\n"
            f"–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ"
        )

        remove_keyboard = types.ReplyKeyboardRemove()
        bot.send_message(ADMIN_ID, admin_response, reply_markup=remove_keyboard)
        bot.send_message(USER_ID, response)

        bot.send_message(USER_ID, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è")

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–î–∞', callback_data="yes")
        btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data="no")
        markup.row(btn1, btn2)

        bot.send_message(ADMIN_ID, "‚ùì –í—ã –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞?", reply_markup=markup)

    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        bot.send_message(USER_ID, "‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global order
    global items_markup

    if call.data == "yes":
        bot.delete_message(ADMIN_ID, call.message.message_id)
        bot.delete_message(USER_ID, call.message.message_id-1)
        items_markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton(f'{item["name"]} ‚Äî {item["quantity"]} —à—Ç.', callback_data=f'item_{item["name"]}')
            for item in order
        ]
        for i in range(0, len(buttons), 2):
            items_markup.row(*buttons[i:i+2])

        bot.send_message(USER_ID, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–ª—é–¥ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        bot.send_message(ADMIN_ID, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ", reply_markup=items_markup)
        

    if call.data == "no":
        bot.delete_message(ADMIN_ID, call.message.message_id)
        timeout_markup = types.InlineKeyboardMarkup()
        timeout_markup.add(types.InlineKeyboardButton('üî™ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞', callback_data="yes"))
        bot.send_message(ADMIN_ID, '‚ùå –í—ã –æ—Ç–ª–æ–∂–∏–ª–∏ –∑–∞–∫–∞–∑', reply_markup=timeout_markup)
        bot.send_message(USER_ID, "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ª–æ–∂–µ–Ω")

    if call.data.startswith("item_"):
        item_name = call.data.split("_", 1)[1]
        item = next((item for item in order if item["name"] == item_name), None)

        if item:
            bot.delete_message(ADMIN_ID, call.message.message_id)
            bot.delete_message(USER_ID, call.message.message_id-1)
            time_markup = types.InlineKeyboardMarkup()
            time_markup.add(types.InlineKeyboardButton("‚úÖ –ë–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!", callback_data=f"done_{item_name}"))
            bot.send_message(USER_ID, f'üî™ –ë–ª—é–¥–æ "{item["name"]} ‚Äî {item["quantity"]} —à—Ç." –≥–æ—Ç–æ–≤–∏—Ç—Å—è! –ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
            bot.send_message(ADMIN_ID, f"üî™ –í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ '{item['name']} ‚Äî {item['quantity']} —à—Ç.'", reply_markup=time_markup)


    if call.data.startswith("done_"):
        item_name = call.data.split("_", 1)[1]

        order = [item for item in order if item["name"] != item_name]

        bot.send_message(USER_ID, f'‚úÖ –ë–ª—é–¥–æ "{item_name}" –≥–æ—Ç–æ–≤–æ! –û –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –±–ª—é–¥ –í–∞–º –ø—Ä–∏–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        bot.delete_message(ADMIN_ID, call.message.message_id)
        bot.delete_message(USER_ID, call.message.message_id-1)

        if order:
            items_markup = types.InlineKeyboardMarkup()
            buttons = [
                types.InlineKeyboardButton(f'{item["name"]} ‚Äî {item["quantity"]} —à—Ç.', callback_data=f'item_{item["name"]}')
                for item in order
            ]
            for i in range(0, len(buttons), 2):
                items_markup.row(*buttons[i:i+2])

            bot.send_message(ADMIN_ID, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ", reply_markup=items_markup)
        else:
            bot.delete_message(USER_ID, call.message.message_id+1)
            bot.send_message(USER_ID, "‚úÖ –í—Å–µ –±–ª—é–¥–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ã! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞)")
            bot.send_message(ADMIN_ID, "‚úÖ –í—Å–µ –±–ª—é–¥–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")



bot.polling(none_stop=True) 